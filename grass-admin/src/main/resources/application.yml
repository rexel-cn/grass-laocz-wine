# 项目相关配置
grass-server:
  # 名称
  name: grass-service
  # 版本
  version: 2.0.0
  # 版权年份
  copyrightYear: 2022
  # 实例演示开关
  demoEnabled: true
  # 文件路径 示例（ Windows配置D:grass-server/uploadPath，Linux配置 grass-server/uploadPath）
  #profile: D:/grass-server/uploadPath
  profile: /opt/uploadPath
  # 获取ip地址开关
  addressEnabled: false
  # 验证码类型 math 数组计算 char 字符验证
  captchaType: math

# 开发环境配置
server:
  # 服务器的HTTP端口，默认为8080
  port: 9200
  servlet:
    # 应用的访问路径
    context-path: /
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8
    threads:
      # tomcat最大线程数，默认为800
      max: 800
      # Tomcat启动初始化的线程数，默认值30
      min-spare: 30

# 日志配置
logging:
  level:
    com.rexel: debug
    org.springframework: warn

# Spring配置
spring:
  main:
    allow-circular-references: true
  # 资源信息
  messages:
    # 国际化资源文件路径
    basename: i18n/messages
  profiles:
    active: @environment@  # 引用pom文件的 参数
  # 文件上传
  servlet:
    multipart:
      # 单个文件大小
      max-file-size: 10MB
      # 设置总上传的文件大小
      max-request-size: 20MB
  # 服务模块
  devtools:
    restart:
      # 热部署开关
      enabled: true
  # redis 配置
  redis:
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池的最大数据库连接数
        max-active: 8
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
  # 配置路径，swagger适配 springboot 2.6.x 以上版本
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher


# token配置
token:
  # 令牌自定义标识
  header: Authorization
  # 令牌密钥
  secret: abcdefghijklmnopqrstuvwxyz
  # 令牌有效期（默认30分钟）
  expireTime: 30000

mybatis-plus:
  mapper-locations: classpath*:mybatis/**/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: com.rexel.**.domain
  #typeEnumsPackage: com.baomidou.springboot.entity.enums
  global-config:
    db-config:
      #主键类型 com.baomidou.mybatisplus.annotation.IdType";
      id-type: AUTO
      #字段策略 com.baomidou.mybatisplus.annotation.FieldStrategy"
      select-strategy: NOT_EMPTY
      insert-strategy: NOT_EMPTY
      update-strategy: IGNORED
      #逻辑删除配置（下面3个配置）
      logic-delete-value: 0
      logic-not-delete-value: 1
  configuration:
    jdbc-type-for-null: 'null'
    #数据库大写下划线转换
    map-underscore-to-camel-case: true
    cache-enabled: false
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl #开启sql日志
  configuration-properties:
    dbType: mysql #设置全局属性用于控制数据库的类型


# PageHelper分页插件
pagehelper:
  helperDialect: mysql
  reasonable: false #开启优化，如果开启优化，在分页页码结果没有数据的时候,会显示有数据的页码数据
  supportMethodsArguments: false
  params: count=countSql

# Swagger配置
swagger:
  # 是否开启swagger
  enabled: true
  # 请求前缀
  pathMapping: /dev-api

# 防止XSS攻击
xss:
  # 过滤开关
  enabled: true
  # 排除链接（多个用逗号分隔）
  excludes: /system/notice
  # 匹配链接
  urlPatterns: /system/*,/monitor/*,/tool/*

#文件上传配置
#使用的上传存储空间,local本地,aliyun:阿里云
oss:
  client-type: minio
  #默认上传目录
  base_dir:
  #允许的文件扩展名
  allowed_extension: mp4,bmp, gif, jpg, jpeg, png,doc, docx, xls, xlsx, ppt, pptx,html,htm,txt,rar, zip, gz, bz2,pdf
  #最大文件大小 50M
  max_size: 52428800
  #是否需要按照日期存放文件
  needDatePath: false

# 工作流 Flowable 配置
flowable:
  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常
  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表
  # 3. create_drop: 启动时自动创建表，关闭时自动删除表
  # 4. drop_create: 启动时，删除旧表，再创建新表
  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化
  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置
  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程
  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数
  #
